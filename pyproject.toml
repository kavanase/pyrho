[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools >= 42", "versioningit ~= 1.0", "wheel"]

[project]
classifiers = [
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Information Technology",
    "Operating System :: OS Independent",
    "Topic :: Other/Nonlisted Topic",
    "Topic :: Scientific/Engineering",
]
authors = [{name = "Jimmy-Xuan Shen", email = "jmmshn@gmail.com"}]
dependencies = [
  'pymatgen>=2023.9.21',
]

description = "Tools for re-griding periodic volumetric quantum chemistry data for machine-learning purposes."
dynamic = ["version"]
keywords = ["machine-learning", "dft", "vasp", "volumetric", "pymatgen"]
license = {text = "modified BSD"}
name = "mp-pyrho"
readme = "README.md"
requires-python = ">=3.8"

[project.optional-dependencies]
dev = ["pre-commit==2.17.0"]
docs = [
  "numpydoc==1.3.1",
  "sphinx==5.0.2",
  "furo==2022.6.21",
  "m2r2==0.3.2",
  "ipython==8.4.0",
  "nbsphinx==0.8.9",
  "nbsphinx-link==1.3.0",
  "sphinx-autodoc-typehints==2.0.0",
  "sphinx-autoapi==3.0.0",
]
tests = [
  "pytest==7.1.2",
  "pytest-cov==3.0.0",
  "hypothesis==6.40.1",
]
strict = [
  "pymatgen==2024.2.20",
]

[project.urls]
homepage = "https://materialsproject.github.io/pyrho/"
repository = "https://materialsproject.github.io/pyrho"

[tool.ruff]
src = ["src",]
extend-exclude = ["docs", "tests"]
line-length = 88
indent-width = 4
# By default, ruff only uses all "E" (pycodestyle) and "F" (pyflakes) rules.
# Here we append to the defaults.
select = [
  # (flake8-builtins) detect shadowing of python builtin symbols by variables and arguments.
  # Attributes are OK (which is why A003) is not included here.
  "A001",
  "A002",
  # (useless expression): Expressions that aren't assigned to anything are typically bugs.
  "B018",
  # (pydocstyle) Docstring-related rules. A large subset of these are ignored by the
  # "convention=google" setting, we set under tool.ruff.pydocstyle.
  "D",
  # (pycodestyle) pycodestyle rules
  "E",
  # (pyflakes) pyflakes rules
  "F",
  # (isort) detect improperly sorted imports
  "I001",
  # (pylint) use all pylint rules from categories "Convention", "Error", and "Warning" (ruff
  # currently implements only a subset of pylint's rules)
  "PLE",
  "PLW",
  # (no commented out code) keep commented out code blocks out of the codebase
  # "ERA001",
  # (ruff-specific) Enable all ruff-specific checks (i.e. not ports of
  # functionality from an existing linter).
  "RUF",
  # (private member access) Flag access to `_`-prefixed symbols. By default the various special
  # methods on `NamedTuple` are ignored (e.g. `_replace`).
  "SLF001",
  # (flake8-type-checking) Auto-sort imports into TYPE_CHECKING blocks depending on whether
  # they are runtime or type-only imports.
  "TCH",
  # (banned-api) Flag use of banned APIs. See tool.ruff.flake8-tidy-imports.banned-api for details.
  "TID251",
  # (disallow print statements) keep debugging statements out of the codebase
  "T20",
  # (f-strings) use f-strings instead of .format()
  "UP032",
  # (invalid escape sequence) flag errant backslashes
  "W605",
]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`).
select = ["E4", "E7", "E9", "F", "D", "I001", "TCH"]
ignore = ["E203", "E501", "F401"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.versioningit.vcs]
default-tag = "0.0.1"
method = "git"

[tool.mypy]
ignore_missing_imports = true
no_strict_optional = true

[tool.pytest.ini_options]
filterwarnings = [
  "ignore:.*POTCAR.*:UserWarning",
  "ignore:.*magmom.*:UserWarning",
  "ignore:.*is not gzipped.*:UserWarning",
  "ignore:.*input structure.*:UserWarning",
  "ignore::DeprecationWarning",
]

[tool.coverage.run]
branch = true
include = ["src/*"]
parallel = true

[tool.coverage.paths]
source = ["src/"]

[tool.coverage.report]
exclude_lines = [
  '^\s*assert False(,|$)',
  'if typing.TYPE_CHECKING:',
  '^\s*@overload( |$)',
]
show_missing = true
skip_covered = true
